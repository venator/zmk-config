/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// urob zmk-helpers
//#include "zmk-helpers/helper.h"
// Source desired key-position labels
//#include "zmk-helpers/key-labels/34.h"
// Source unicode-chars for desired languages
//#include "zmk-helpers/unicode-chars/german.dtsi"

// local includes
//#include "keymap_french.h"

// Homerow mods
//#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
//#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
//#define THUMBS LH1 LH0 RH0 RH1

// Layer definitions
#define BASE 0
#define NAVNUM 1
#define FUN 2
#define GAME 3
//#define SYM 1
//#define EXT 2
//#define FNC 3
//#define SYM2 4
//#define ACCENT 5
#define SETTINGS 4
// -----------------

&sk {
	// don't release mods on other mods presses
	ignore-modifiers;
};


/ {
	behaviors {
		// Enables holding the first mod-tap key
		// by performing a tap-release-hold sequence.
		// To use it: "&qt KEYCODE1 KEYCODE2"
		qt: quick_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "QUICK_TAP";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <200>;
			bindings = <&kp>, <&kp>;
		};

		// Layer activation variant
		qlt: quick_layer_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "QUICK_LAYER_TAP";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <200>;
			bindings = <&mo>, <&kp>;
		};

		// Homerow mods
		hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };
	};

	macros {
		// sometimes my device thinks a modifier is being held down
		// pressing all modifiers fixes it.
		/*
		unstick: unstick {
			label = "ZM_unstick";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
		};
		*/
	};

	combos {
		compatible = "zmk,combos";
		// both right thumb keys
		/*
		combo_accent {
			timeout-ms = <200>;
			key-positions = <32 33>;
			bindings = <&mo ACCENT>;
		};
		*/
		// internal-left & external-right thumb keys
		/*
		combo_sym2 {
			timeout-ms = <200>;
			key-positions = <31 33>;
			bindings = <&mo SYM2>;
		};
		*/
		// both left thumb keys
		combo_settings {
			timeout-ms = <200>;
			key-positions = <30 31>;
			bindings = <&mo SETTINGS>;
		};
		// left index & middle fingers (home-row)
		// hold control & space for Adobe workflow
		/*
		combo_ctrl_space {
			timeout-ms = <200>;
			key-positions = <12 13>;
			bindings = <&kp LC(SPACE)>;
			layers = <BASE>;
		};
		*/
		// enable/disable navigation and numbers layer
		combo_navnum {
			timeout-ms = <200>;
			key-positions = <4 32>;
			bindings = <&tog NAVNUM>;
			layers = <BASE>;
		};
		// enable/disable game layer
		combo_game {
			timeout-ms = <200>;
			key-positions = <4 32>;
			bindings = <&to BASE>;
			layers = <GAME>;
		};
		// enable caps word
		combo_caps_word {
			timeout-ms = <200>;
			key-positions = <24 25>;
			bindings = <&caps_word>;
			layers = <BASE>;
		};
	};

	keymap {
		compatible = "zmk,keymap";
		// Base alpha layer
		// Homerow mods GACS (see https://precondition.github.io/home-row-mods#gacs)
		default_layer {
			label = "Base";
			bindings = <
			&kp Q &kp W &kp E &kp R &kp T                               &kp Y &kp U  &kp I     &kp O   &kp P
			&hml LGUI A &hml LALT S &hml LCTRL D &hml LSHIFT F &kp G    &kp H &hmr RSHIFT J &hmr RCTRL K &hmr LALT L &hmr RGUI SEMI
			&kp Z &kp X &kp C &kp V &kp B                               &kp N &kp M  &kp COMMA &kp DOT &kp SLASH
							         &qt LSHIFT BSPC &qlt NAVNUM ESC    &qlt NAVNUM ENTER &qt RALT SPACE
			>;
		};

		// Navigation and numbers
		/*
		navnum_layer {
			label = "NavNum";
			bindings = <
			&kp TAB &kp HOME &kp UP &kp END &kp PG_UP                  &kp SLASH &kp N7 &kp N8 &kp N9 &to FUN
			&kp CAPS &kp LEFT &kp DOWN &kp RIGHT &kp PG_DN             &kp MINUS &kp N4 &kp N5 &kp N6 &kp N0
			&none &kp C_VOL_DN &kp C_MUTE &kp C_VOL_UP &kp LS(TAB)     &kp COMMA &kp N1 &kp N2 &kp N3 &kp DOT
							&qt LSHIFT ESC &kp DEL        &kp SPACE &qt RALT ENTER
			>;
		};
		*/

		// Navigation and numbers (vim-like)
		navnum_layer {
			label = "NavNum";
			bindings = <
			&kp HOME &kp PG_DN &kp PG_UP &kp END &tog NAVNUM         &kp KP_SLASH &kp N7 &kp N8 &kp N9 &to FUN
			&kp LEFT &kp DOWN &kp UP &kp RIGHT &kp TAB               &kp KP_MINUS &kp N4 &kp N5 &kp N6 &kp N0
			&kp LC(Z) &kp LC(X) &kp LC(C) &kp LC(V) &kp LS(TAB)      &kp KP_COMMA &kp N1 &kp N2 &kp N3 &kp DOT
							                 &qt LSHIFT DEL &none    &to BASE &kp SPACE
			>;
		};

		// Function keys
		fun_layer {
			label = "Fun";
			bindings = <
			&none &kp C_PREV &kp C_PLAY_PAUSE &kp C_NEXT &to BASE      &to GAME &kp F7 &kp F8 &kp F9 &kp F12
			&kp LGUI &kp LALT &kp LCTRL &kp LSHIFT &none               &none &kp F4 &kp F5 &kp F6 &kp F11
			&none &kp C_VOL_DN &kp C_MUTE &kp C_VOL_UP &none           &none &kp F1 &kp F2 &kp F3 &kp F10
							                          &none &none      &to BASE &none
			>;
		};

		// Gaming layer
		game_layer {
			label = "Game";
			bindings = <
			&kp TAB &kp Q &kp W &kp E &kp R       &none &kp N7 &kp N8 &kp N9 &to FUN
			&kp LSHIFT &kp A &kp S &kp D &kp F    &none &kp N4 &kp N5 &kp N6 &kp N0
			&kp LCTRL &kp Z &kp X &kp C &kp V     &none &kp N1 &kp N2 &kp N3 &none
							 &kp SPACE &kp ESC    &kp ENTER &kp SPACE
			>;
		};

		// Numbers layer
		/*
		numbers_layer {
			label = "Num";
			bindings = <
			&none &kp N7 &kp N8 &kp N9 &kp SLASH            &kp TAB &kp HOME &kp PG_DN &kp PG_UP &kp END
			&kp N0 &kp N4 &kp N5 &kp N6 &kp MINUS           &none &kp LEFT &kp DOWN &kp UP &kp RIGHT
			&kp DOT &kp N1 &kp N2 &kp N3 &kp COMMA          &none &kp C_VOL_DN &kp C_MUTE &kp C_VOL_UP &kp LS(TAB)
							&qt LSHIFT ESC &kp DEL        &kp SPACE &qt RALT ENTER
			>;
		};
		*/

		// Numbers and high frequency symbols
		/*
		sym_layer {
			label = "Sym.";
			bindings = <
			&kp N1 &kp N2 &kp N3 &kp N4 &kp N5		                                    &kp N6 &kp N7 &kp N8 &kp N9 &kp N0
			&kp IT_LESS &kp IT_USD &kp IT_LPAR &kp IT_LBRC &kp IT_LBKT  &kp IT_EQL &kp IT_QUES &kp IT_SQUOT &kp IT_MINUS &kp IT_AST
			&kp IT_GREAT &kp IT_PERC &kp IT_RPAR &kp IT_RBRC &kp IT_RBKT 	&kp IT_AT &kp IT_EXCL &kp IT_DQUOT &kp IT_PLUS &kp IT_FSLH
														&mo FNC  &mo SYM2       &trans &trans
			>;
		};
		*/

		// Main modifiers and arrow keys
		/*
		ext_layer {
			label = "Mods";
			bindings = <
			&kp ESC  &kp C_PREV &kp C_PP  &kp C_NEXT  &kp C_PAUSE    	&kp PG_UP  &kp HOME &kp UP &kp END &kp CAPS
			&sk LALT &sk LGUI  &sk LSHIFT  &sk LCTRL  &kp RALT 			&kp PG_DN &kp LEFT  &kp DOWN  &kp RIGHT   &kp DEL
			&kp LC(Z)  &kp LC(X) &kp LC(C) &kp TAB   &kp LC(V)          &kp LC(BSPC) &kp BSPC &trans &trans  &trans
																		&trans &kp LCTRL    &kp ENTER  &mo FNC
			>;
		};
		*/

		// Function keys with modifiers
		/*
		fnc_layer {
			label = "FRow";
			bindings = <
			&kp F1 &kp F2 &kp F3 &kp F4 &kp F5                  &kp F6 &kp F7 &kp F8 &kp F9 &kp F10
			&sk LALT &sk LGUI &sk LSHIFT &sk LCTRL &kp RALT     &kp F11 &kp F12  &kp PRINTSCREEN &trans &trans
			&none &none &none &none &none				          &none &none &none &none &none
							  &none &none              &none &none
			>;
		};
		*/

		// Low frequency symbols.
		/*
		symbols_2_layer {
			label = "Sym.2";
			bindings = <
			&kp IT_CARET &kp IT_UNDER &kp IT_PND &kp IT_EUR &kp IT_HASH         &none &none &none &none &none
			&kp IT_BKTK &kp IT_TILDE &kp IT_BSLH &kp IT_PIPE &kp IT_AND         &none &none &none &none &none
			&none 			&none 			 &kp IT_SECT &kp IT_CCED &kp IT_DEG				  &none &none &none &none &none
																	&none &none        	&none &none
			>;
		};
		*/

		// Used to type regional accents.
		/*
		accent_layer {
			label = "Accent";
			bindings = <
			&none &none &none &kp IT_CEGR &none                         &none &none &none &none &none
			&kp IT_AGRV &kp IT_IGRV &kp IT_OGRV &kp IT_EGRV &kp IT_EACU &none &none &none &none &none
			&none &none &none &kp IT_UGRV &none                         &none &none &none &none &none
									&none &none                         &none &none
			>;
		};
		*/

		// Used to change the keyboard's settings.
		settings_layer {
				label = "Setting";
				bindings = <
				&bootloader &none &none &bt BT_CLR &bt BT_SEL 0    &bt BT_SEL 3 &none &none &none &bootloader
				&none &none &none &none &bt BT_SEL 1 			   &bt BT_SEL 4 &none &none &none &none
				&studio_unlock &none &none &none &bt BT_SEL 2      &bt BT_SEL 5 &none &none &none &studio_unlock
										            &none &none    &none &none
				>;
		};
	};
};
